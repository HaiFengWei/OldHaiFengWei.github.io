<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | haifeng's blog]]></title>
  <link href="http://haifengwei.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://haifengwei.github.io/"/>
  <updated>2017-04-28T15:58:27+08:00</updated>
  <id>http://haifengwei.github.io/</id>
  <author>
    <name><![CDATA[haifeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quartz 2D（一）]]></title>
    <link href="http://haifengwei.github.io/blog/2017/04/27/quartz-2d(%5B%3F%5D-)/"/>
    <updated>2017-04-27T13:01:44+08:00</updated>
    <id>http://haifengwei.github.io/blog/2017/04/27/quartz-2d([?]-)</id>
    <content type="html"><![CDATA[<p>     Q：Quartz 2D是什么，有什么用?<br/>     A：Quartz 2D是一个二维图形绘制引擎，支持iOS环境和Mac OS X环境。<!--more-->我们可以使用Quartz 2D API来实现许多功能，如基本路径的绘制、透明度、描影、绘制阴影、透明层、颜色管理、反锯齿、PDF文档生成和PDF元数据访问。在需要的时候，Quartz 2D还可以借助图形硬件的功能。</p>

<h3>图形上下文</h3>

<p>     在利用Quartz 2D绘图之前我们需要对图形上下文有个简单的了解。图形上下文(Graphics Context)是一个CGContextRef类型的数据，它的作用可分为2点：</p>

<ul>
<li>保存绘图信息、绘图状态</li>
<li>决定绘制的输出目标(绘制到什么地⽅去?) (输出目标可以是PDF⽂文件、Bitmap或者显示器的窗口上)
<img src="http://images.cnitblog.com/i/450136/201406/092233140776524.png" alt="示例图" />
相同的⼀套绘图序列,指定不同的Graphics Context,就可将相同的图像绘制到不同的目标上
<img src="http://images.cnitblog.com/i/450136/201406/092235089676225.png" alt="示例图" /></li>
</ul>


<h3>Quartz 2D绘图基本步骤</h3>

<p>     在iOS中常用的绘图框架就是Quartz 2D，Quartz 2D是Core Graphics框架的一部分，在UIKit中也有很好的封装和集成，我们日常开发时所用到的UIKit中的组件都是由Core Graphics进行绘制的。<br/>     在iOS中绘图一般分为以下几个步骤：</p>

<p>         1.获取图形上下文<br/>         2.创建并设置路径<br/>         3.将路径添加到上下文<br/>         4.设置上下文状态<br/>         5.绘制路径<br/>         6.释放路径</p>

<h3>基本图形绘制</h3>

<p>     View之所以能显示东西,完全是因为它内部有个layer(图层)属性。在View的<code>drawRect:</code>中取得的上下⽂文后,就可以绘制东西到view上。<br/>     在<code>drawRect:</code>方法中取得的是一个Layer Graphics Context,因此,绘制的东西其实是绘制到view的layer上去了<br/>     注意：调用<code>drawRect:</code>会开辟一个新的寄宿图层，对应用性能有一定影响。当然这里主要是说Quartz 2D的用法，可以忽略😑。</p>

<p>     下面自定义一个View继承自UIView，重写drawRect:方法绘制直线说明下绘图的步骤：（直接上代码）：
     </p>

<pre><code>- (void)drawRect:(CGRect)rect {
    // 画线条
    [self drawLineWithRect:rect];
}
#pragma mark -
#pragma mark - DrawLine
- (void)drawLineWithRect:(CGRect)rect {
    // 1.取得和当前视图相关联的图形上下文(因为图形上下文决定绘制的输出目标)/
    // 如果是在drawRect方法中调用UIGraphicsGetCurrentContext方法获取出来的就是Layer的上下文
    CGContextRef context = UIGraphicsGetCurrentContext();//不需要*,同id

    // 2.绘图(绘制直线), 保存绘图信息
    // 设置起点
    CGContextMoveToPoint(context, 20, 100);
    //设置终点
    CGContextAddLineToPoint(context, 300, 100);

    /**  设置绘图的状态  **/
    //设置笔触颜色
    CGContextSetRGBStrokeColor(context, 1.0, 0, 0, 1);
    //设置线条的宽度
    CGContextSetLineWidth(context, 15);
    //设置顶点样式
    CGContextSetLineCap(context, kCGLineCapRound);
    //设置连接点样式
    CGContextSetLineJoin(context, kCGLineJoinRound);
    //3.渲染（绘制出一条空心的线）
    CGContextStrokePath(context);
    //注意线条不能渲染为实心的
    //    CGContextFillPath(ctx);
    //设置第二条线
    //设置第二条线的起点
    CGContextMoveToPoint(context, 50, 200);
    //设置第二天线的终点(自动把上一条直线的终点当做起点)
    CGContextAddLineToPoint(context, 50, 60);

    /**  设置绘图的状态  **/
    //    CGContextSetRGBStrokeColor(ctx, 1.0, 0.7, 0.3, 1.0);
    //第二种设置颜色的方式
    [[UIColor grayColor] set];
    //设置线条的宽度
    CGContextSetLineWidth(context, 10);
    //设置线条的起点和终点的样式
    CGContextSetLineCap(context, kCGLineCapButt);

    //渲染第二条线的图形到view上
    //绘制一条空心的线
    CGContextStrokePath(context);

}
</code></pre>

<p><img src="https://haifengwei.github.io/images/iOS/Snip20170427_3.png" alt="示例图" /></p>

<p>     至于画一些圆形、矩形、三角形之类的都相似，可以看<a href="https://github.com/HaiFengWei/Quartz2D_Demo">demo</a>,里有详细步骤就不一一写上去了。<br/>     <a href="https://github.com/HaiFengWei/Quartz2D_Demo">点这里进入demo</a></p>

<p>文章参考：<a href="http://www.cnblogs.com/kenshincui/p/3959951.html#basicDraw">《iOS开发系列&ndash;打造自己的“美图秀秀”》</a>、<a href="http://www.cnblogs.com/wendingding/p/3778940.html">《iOS开发UI篇—Quartz2D简单介绍》</a></p>

<p>         </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识CALayer]]></title>
    <link href="http://haifengwei.github.io/blog/2017/04/27/chu-shi-calayer/"/>
    <updated>2017-04-27T10:14:04+08:00</updated>
    <id>http://haifengwei.github.io/blog/2017/04/27/chu-shi-calayer</id>
    <content type="html"><![CDATA[<p>     CALayer是定义在QuartzCore框架中的(Core Animation)，它是绘图和动画的基础，在3D空间中的2D平面。CALayer管理的几何（例如rotate，transfrom），内容（image等），和可视属性（backgroundColor，alpha）等信息。<!--more-->CALayer主要通过管理bitmap来维护自己的状态信息，从这一点上来说，Layer可以看作对象模型，因为他们主要用来管理数据。</p>

<h3>二、Layer与bitmap的关系</h3>

<p>      Layer是基于bitmap的，它会捕获View要呈现的内容，然后cache在一个bitmap中，这个bitmap可以看作一个对象。这样每次进行操作，例如平移旋转等，只是bitmap的矩阵运算。</p>

<p>      由于基于Layer的绘制是处理静态的Bitmap的，而bitmap的处理又是GPU所擅长的，所以它的效率要比基于View绘制的高很多，因为基于View绘制的每次都要进行drawRect的调用重新绘制。</p>

<h3>三、UIView与CALayer的关系</h3>

<p>      既然说CALayer ，那么UIView肯定要提一下， UIView是iOS系统中界面元素的基础，所有的界面元素都继承自它。在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层。UIView本身更像是一个CALayer的管理器，访问它的跟绘图和跟坐标有关的属性，例如frame，bounds等等，实际上内部都是在访问它所包含的CALayer的相关属性。</p>

<p>      另外UIView和CALayer最大的区别就是UIView可以接受用户输入（例如触摸）而CALayer不可以，CALayer单独并不能呈现出任何可视的内容，必须依托于UIView。CALayer只是几何上呈现给用户的东西，它较为轻量，通常采用Cache技术，对资源消耗也较小。</p>

<p>      UIView和CALayer关系图如下：
      
<img src="http://cc.cocimg.com/api/uploads/20161204/1480865231251244.png" alt="关系图" /></p>

<h3>四、anchorPoint和position</h3>

<p>   和UIView不同，Layer主要由三个属性来设置位置（极少用<code>Frame：</code>）</p>

<ul>
<li>bounds                 设置大小</li>
<li>anchorPoint         设置锚点（锚点对后续的layer动画有很大影响）</li>
<li>position                锚点在superLayer中的位置</li>
</ul>


<p>      这样说有点抽象，我们看看以下的图就了解了对于iOS来说，坐标系如图，archPoint（x,y）的两个值通常取0.0-1.0,默认值是（0.5，0.5）这里的值可以看作所占用x的比例，比如默认的0.5，0.5就是在x的中间和y的中间。
￼<img src="http://upload-images.jianshu.io/upload_images/2782212-f61aade513ffd51e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20150110130108359.png" /></p>

<p>      而position则是AnchorPoint在super layer中的位置
如下图
<img src="http://upload-images.jianshu.io/upload_images/2782212-071d76aaa3517d68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20150110130534295.png" /></p>

<h3>五、管理Layer内容的几个函数</h3>

<ul>
<li>addSublayer:</li>
<li>insertSublayer:above:</li>
<li>insertSublayer:atIndex:</li>
<li>insertSublayer:below:</li>
<li>removeFromSuperlayer</li>
<li>replaceSublayer:with:</li>
</ul>


<h3>六、CLayer的Sublayer</h3>

<p>      CLayer支持继承，支持添加Sublayer，支持对sublayer进行层次调整</p>

<ul>
<li>CAEmitterLayer            发射器层，用来控制粒子效果</li>
<li>CAGradientLayer           梯度层，颜色渐变</li>
<li>CAEAGLayer                用OpenGL ES绘制的层</li>
<li>CAReplicationLayer      用来自动复制sublayer</li>
<li>CAScrollLayer              用来管理可滑动的区域</li>
<li>CAShapeLayer             绘制立体的贝塞尔曲线</li>
<li>CATextLayer                 可以绘制AttributeString</li>
<li>CATiledLayer                用来管理一副可以被分割的大图</li>
<li>CATransformLayer        用来渲染3D layer的层次结构</li>
</ul>


<p>文章参考：<a href="http://blog.csdn.net/hello_hwc?viewmode=contents">《 IOS SDK详解之CALayer（一）》</a>、<a href="http://www.jianshu.com/p/b64f9a1bdd1b">《初探CALayer属性》</a></p>
]]></content>
  </entry>
  
</feed>
