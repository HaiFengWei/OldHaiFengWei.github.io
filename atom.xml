<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[haifeng's blog]]></title>
  <link href="http://haifengwei.github.io/atom.xml" rel="self"/>
  <link href="http://haifengwei.github.io/"/>
  <updated>2017-04-27T15:49:47+08:00</updated>
  <id>http://haifengwei.github.io/</id>
  <author>
    <name><![CDATA[haifeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quartz 2D（一）]]></title>
    <link href="http://haifengwei.github.io/blog/2017/04/27/quartz-2d(%5B%3F%5D-)/"/>
    <updated>2017-04-27T13:01:44+08:00</updated>
    <id>http://haifengwei.github.io/blog/2017/04/27/quartz-2d([?]-)</id>
    <content type="html"><![CDATA[<p>     Q：Quartz 2D是什么，有什么用?<br/>     A：Quartz 2D是一个二维图形绘制引擎，支持iOS环境和Mac OS X环境。<!--more-->我们可以使用Quartz 2D API来实现许多功能，如基本路径的绘制、透明度、描影、绘制阴影、透明层、颜色管理、反锯齿、PDF文档生成和PDF元数据访问。在需要的时候，Quartz 2D还可以借助图形硬件的功能。</p>

<h3>图形上下文</h3>

<p>     在利用Quartz 2D绘图之前我们需要对图形上下文有个简单的了解。图形上下文(Graphics Context)是一个CGContextRef类型的数据，它的作用可分为2点：</p>

<ul>
<li>保存绘图信息、绘图状态</li>
<li>决定绘制的输出目标(绘制到什么地⽅去?) (输出目标可以是PDF⽂文件、Bitmap或者显示器的窗口上)
<img src="http://images.cnitblog.com/i/450136/201406/092233140776524.png" alt="示例图" />
相同的⼀套绘图序列,指定不同的Graphics Context,就可将相同的图像绘制到不同的目标上
<img src="http://images.cnitblog.com/i/450136/201406/092235089676225.png" alt="示例图" /></li>
</ul>


<h3>Quartz 2D绘图基本步骤</h3>

<p>     在iOS中常用的绘图框架就是Quartz 2D，Quartz 2D是Core Graphics框架的一部分，在UIKit中也有很好的封装和集成，我们日常开发时所用到的UIKit中的组件都是由Core Graphics进行绘制的。<br/>     在iOS中绘图一般分为以下几个步骤：</p>

<p>         1.获取图形上下文<br/>         2.创建并设置路径<br/>         3.将路径添加到上下文<br/>         4.设置上下文状态<br/>         5.绘制路径<br/>         6.释放路径</p>

<h3>基本图形绘制</h3>

<p>     View之所以能显示东西,完全是因为它内部有个layer(图层)属性。在View的<code>drawRect:</code>中取得的上下⽂文后,就可以绘制东西到view上。<br/>     在<code>drawRect:</code>方法中取得的是一个Layer Graphics Context,因此,绘制的东西其实是绘制到view的layer上去了<br/>     注意：调用<code>drawRect:</code>会开辟一个新的寄宿图层，对应用性能有一定影响。当然这里主要是说Quartz 2D的用法，可以忽略😑。</p>

<p>     下面自定义一个View继承自UIView，重写drawRect:方法绘制直线说明下绘图的步骤：（直接上代码）：
     </p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)drawRect:(CGRect)rect {
</span><span class='line'>    // 画线条
</span><span class='line'>    [self drawLineWithRect:rect];
</span><span class='line'>}
</span><span class='line'>#pragma mark -
</span><span class='line'>#pragma mark - DrawLine
</span><span class='line'>- (void)drawLineWithRect:(CGRect)rect {
</span><span class='line'>    // 1.取得和当前视图相关联的图形上下文(因为图形上下文决定绘制的输出目标)/
</span><span class='line'>    // 如果是在drawRect方法中调用UIGraphicsGetCurrentContext方法获取出来的就是Layer的上下文
</span><span class='line'>    CGContextRef context = UIGraphicsGetCurrentContext();//不需要*,同id
</span><span class='line'>    
</span><span class='line'>    // 2.绘图(绘制直线), 保存绘图信息
</span><span class='line'>    // 设置起点
</span><span class='line'>    CGContextMoveToPoint(context, 20, 100);
</span><span class='line'>    //设置终点
</span><span class='line'>    CGContextAddLineToPoint(context, 300, 100);
</span><span class='line'>    
</span><span class='line'>    /**  设置绘图的状态  **/
</span><span class='line'>    //设置笔触颜色
</span><span class='line'>    CGContextSetRGBStrokeColor(context, 1.0, 0, 0, 1);
</span><span class='line'>    //设置线条的宽度
</span><span class='line'>    CGContextSetLineWidth(context, 15);
</span><span class='line'>    //设置顶点样式
</span><span class='line'>    CGContextSetLineCap(context, kCGLineCapRound);
</span><span class='line'>    //设置连接点样式
</span><span class='line'>    CGContextSetLineJoin(context, kCGLineJoinRound);
</span><span class='line'>    //3.渲染（绘制出一条空心的线）
</span><span class='line'>    CGContextStrokePath(context);
</span><span class='line'>    //注意线条不能渲染为实心的
</span><span class='line'>    //    CGContextFillPath(ctx);
</span><span class='line'>    //设置第二条线
</span><span class='line'>    //设置第二条线的起点
</span><span class='line'>    CGContextMoveToPoint(context, 50, 200);
</span><span class='line'>    //设置第二天线的终点(自动把上一条直线的终点当做起点)
</span><span class='line'>    CGContextAddLineToPoint(context, 50, 60);
</span><span class='line'>    
</span><span class='line'>    /**  设置绘图的状态  **/
</span><span class='line'>    //    CGContextSetRGBStrokeColor(ctx, 1.0, 0.7, 0.3, 1.0);
</span><span class='line'>    //第二种设置颜色的方式
</span><span class='line'>    [[UIColor grayColor] set];
</span><span class='line'>    //设置线条的宽度
</span><span class='line'>    CGContextSetLineWidth(context, 10);
</span><span class='line'>    //设置线条的起点和终点的样式
</span><span class='line'>    CGContextSetLineCap(context, kCGLineCapButt);
</span><span class='line'>    
</span><span class='line'>    //渲染第二条线的图形到view上
</span><span class='line'>    //绘制一条空心的线
</span><span class='line'>    CGContextStrokePath(context);
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><img src="https://haifengwei.github.io/images/iOS/Snip20170427_3.png" alt="示例图" /></p>

<p>     至于画一些圆形、矩形、三角形之类的都相似，可以看<a href="https://github.com/HaiFengWei/Quartz2D_Demo">demo</a>,里有详细步骤就不一一写上去了。<br/>     <a href="https://github.com/HaiFengWei/Quartz2D_Demo">点这里进入demo</a></p>

<p>文章参考：<a href="http://www.cnblogs.com/kenshincui/p/3959951.html#basicDraw">《iOS开发系列&ndash;打造自己的“美图秀秀”》</a>、<a href="http://www.cnblogs.com/wendingding/p/3778940.html">《iOS开发UI篇—Quartz2D简单介绍》</a></p>

<p>         </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识CALayer]]></title>
    <link href="http://haifengwei.github.io/blog/2017/04/27/chu-shi-calayer/"/>
    <updated>2017-04-27T10:14:04+08:00</updated>
    <id>http://haifengwei.github.io/blog/2017/04/27/chu-shi-calayer</id>
    <content type="html"><![CDATA[<p>     CALayer是定义在QuartzCore框架中的(Core Animation)，它是绘图和动画的基础，在3D空间中的2D平面。CALayer管理的几何（例如rotate，transfrom），内容（image等），和可视属性（backgroundColor，alpha）等信息。<!--more-->CALayer主要通过管理bitmap来维护自己的状态信息，从这一点上来说，Layer可以看作对象模型，因为他们主要用来管理数据。</p>

<h3>二、Layer与bitmap的关系</h3>

<p>      Layer是基于bitmap的，它会捕获View要呈现的内容，然后cache在一个bitmap中，这个bitmap可以看作一个对象。这样每次进行操作，例如平移旋转等，只是bitmap的矩阵运算。</p>

<p>      由于基于Layer的绘制是处理静态的Bitmap的，而bitmap的处理又是GPU所擅长的，所以它的效率要比基于View绘制的高很多，因为基于View绘制的每次都要进行drawRect的调用重新绘制。</p>

<h3>三、UIView与CALayer的关系</h3>

<p>      既然说CALayer ，那么UIView肯定要提一下， UIView是iOS系统中界面元素的基础，所有的界面元素都继承自它。在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层。UIView本身更像是一个CALayer的管理器，访问它的跟绘图和跟坐标有关的属性，例如frame，bounds等等，实际上内部都是在访问它所包含的CALayer的相关属性。</p>

<p>      另外UIView和CALayer最大的区别就是UIView可以接受用户输入（例如触摸）而CALayer不可以，CALayer单独并不能呈现出任何可视的内容，必须依托于UIView。CALayer只是几何上呈现给用户的东西，它较为轻量，通常采用Cache技术，对资源消耗也较小。</p>

<p>      UIView和CALayer关系图如下：
      
<img src="http://cc.cocimg.com/api/uploads/20161204/1480865231251244.png" alt="关系图" /></p>

<h3>四、anchorPoint和position</h3>

<p>   和UIView不同，Layer主要由三个属性来设置位置（极少用<code>Frame：</code>）</p>

<ul>
<li>bounds                 设置大小</li>
<li>anchorPoint         设置锚点（锚点对后续的layer动画有很大影响）</li>
<li>position                锚点在superLayer中的位置</li>
</ul>


<p>      这样说有点抽象，我们看看以下的图就了解了对于iOS来说，坐标系如图，archPoint（x,y）的两个值通常取0.0-1.0,默认值是（0.5，0.5）这里的值可以看作所占用x的比例，比如默认的0.5，0.5就是在x的中间和y的中间。
￼<img src="http://upload-images.jianshu.io/upload_images/2782212-f61aade513ffd51e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20150110130108359.png" /></p>

<p>      而position则是AnchorPoint在super layer中的位置
如下图
<img src="http://upload-images.jianshu.io/upload_images/2782212-071d76aaa3517d68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20150110130534295.png" /></p>

<h3>五、管理Layer内容的几个函数</h3>

<ul>
<li>addSublayer:</li>
<li>insertSublayer:above:</li>
<li>insertSublayer:atIndex:</li>
<li>insertSublayer:below:</li>
<li>removeFromSuperlayer</li>
<li>replaceSublayer:with:</li>
</ul>


<h3>六、CLayer的Sublayer</h3>

<p>      CLayer支持继承，支持添加Sublayer，支持对sublayer进行层次调整</p>

<ul>
<li>CAEmitterLayer            发射器层，用来控制粒子效果</li>
<li>CAGradientLayer           梯度层，颜色渐变</li>
<li>CAEAGLayer                用OpenGL ES绘制的层</li>
<li>CAReplicationLayer      用来自动复制sublayer</li>
<li>CAScrollLayer              用来管理可滑动的区域</li>
<li>CAShapeLayer             绘制立体的贝塞尔曲线</li>
<li>CATextLayer                 可以绘制AttributeString</li>
<li>CATiledLayer                用来管理一副可以被分割的大图</li>
<li>CATransformLayer        用来渲染3D layer的层次结构</li>
</ul>


<p>文章参考：<a href="http://blog.csdn.net/hello_hwc?viewmode=contents">《 IOS SDK详解之CALayer（一）》</a>、<a href="http://www.jianshu.com/p/b64f9a1bdd1b">《初探CALayer属性》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Octopress和GitHub搭建个人博客遇到的坑]]></title>
    <link href="http://haifengwei.github.io/blog/2017/04/26/yong-octopresshe-githubda-jian-ge-ren-bo-ke-yu-dao-de-keng/"/>
    <updated>2017-04-26T09:36:38+08:00</updated>
    <id>http://haifengwei.github.io/blog/2017/04/26/yong-octopresshe-githubda-jian-ge-ren-bo-ke-yu-dao-de-keng</id>
    <content type="html"><![CDATA[<p>网上已经有很多关于搭建Octopress的文章，所以我写篇文章目的记录下我搭建blog过程中遇到的坑，如有人遇到相同问题可以参考一下😁。<!--more--></p>

<h4>坑一、GithubPage部署时执行<code>rake deploy</code>时报错：</h4>

<p>错误信息有这么一句<code>Updates were rejected because the tip of your current branch is behind</code>
这个错误是我在创建仓库时手贱将<code>Initialize this repository with a README</code>这个选项给选中了，这样会导致本地当前版本低于服务端的版本，执行<code>rake deploy</code>发布博文到GitHub Pages失败</p>

<p> <img src="https://haifengwei.github.io/images/Snip20170426_2.png" alt="图片" /></p>

<h3>坑二、在头部导航栏添加Categories:</h3>

<p>1、设置导航栏</p>

<p>导航栏的设置在<code>source\_includes\custom\navigation.html</code>
我们可以将Blog和Archives修改为首页和归档，也可以在此添加一个标签页，此时应使用命令<code>rake new_page['about']</code>创建一个页面，页面路径为<code>source\about\index.markdown</code>;
修改后的文件如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul class="main-navigation"&gt; 
</span><span class='line'>  &lt;li&gt;&lt;a href="http://haifengwei.github.io/"&gt;首页&lt;/a&gt;&lt;/li&gt; 
</span><span class='line'>  &lt;li&gt;&lt;a href="http://haifengwei.github.io/blog/archives"&gt;归档&lt;/a&gt;&lt;/li&gt; 
</span><span class='line'>  &lt;li&gt;&lt;a href="http://haifengwei.github.io/about"&gt;关于&lt;/a&gt;&lt;/li&gt; 
</span><span class='line'>&lt;/ul&gt;</span></code></pre></td></tr></table></div></figure>


<p>2、生成Categories</p>

<p>可以参考下<a href="http://fwhyy.com/2013/05/octopress-blog-setting/">《Octopress博客设置》</a> 、<a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">《为octopress添加分类(category)列表》</a>和问度娘（✿◡‿◡）</p>

<p>3、在头部导航栏添加Categories</p>

<p>百度了一下，全都是说怎么在侧边导航栏怎么添加Categories（老铁，扎心了）。</p>

<p>于是我到处找博文看，就这么找了半天终于看到这么一篇文章<a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/">《为octopress添加tag cloud》</a>和，其中有这么一段代码(去掉\)</p>

<pre><code class="`"> &lt;section&gt;
  &lt;h1&gt;Tags&lt;/h1&gt;
  &lt;ul class="tag-cloud"&gt;
    {\% tag_cloud font-size: 90-210%, limit: 10, style: para \%}
  &lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p> 感觉有点像，于是我就在<code>source\Categories\index.markdown</code>里写了这么一段(去掉\)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: page
</span><span class='line'>title: Categories
</span><span class='line'>navbar: Categories
</span><span class='line'>footer: false
</span><span class='line'>---
</span><span class='line'>{\% category_list font-size: 90-210%, limit: 1000, style: para \%}</span></code></pre></td></tr></table></div></figure>


<p>没想到还就成了。</p>
]]></content>
  </entry>
  
</feed>
